services:
  netbox: &netbox  # Serviço principal NetBox. "&netbox" define um alias para reutilização (como herança) em outros serviços.
    image: docker.io/netboxcommunity/netbox:${VERSION-v4.3-3.3.0}  # Imagem do NetBox com versão configurável via variável de ambiente.
    depends_on:
      netbox-init:
        condition: service_completed_successfully
    env_file: env/netbox.env  # Carrega variáveis de ambiente de um arquivo externo.
    user: "unit:root"  # Define o usuário que executa o container (UID: unit, GID: root).
    healthcheck:  # Verifica se o serviço NetBox está funcionando.
      test: curl -f http://localhost:8080/login/ || exit 1  # Verifica se a interface web de login está acessível.
      start_period: 90s  # Espera 90s antes de iniciar os testes de saúde.
      timeout: 3s  # Tempo máximo de espera por resposta do healthcheck.
      interval: 15s  # Intervalo entre testes.
    volumes:  # Montagens de volumes persistentes.
      - ./configuration:/etc/netbox/config:z,ro  # Configurações do NetBox em modo leitura com SELinux.
      - netbox-media-files:/opt/netbox/netbox/media:rw  # Uploads de mídia de usuários.
      - netbox-reports-files:/opt/netbox/netbox/reports:rw  # Scripts de relatórios personalizados.
      - netbox-scripts-files:/opt/netbox/netbox/scripts:rw  # Scripts de automação personalizados.

  netbox-init:
    <<: *netbox
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    volumes:
      - ./scripts:/opt/netbox/scripts:ro
    entrypoint: ""
    command: >
      sh -c "/opt/netbox/venv/bin/python /opt/netbox/netbox/manage.py migrate &&
             /opt/netbox/venv/bin/python /opt/netbox/netbox/manage.py collectstatic --no-input &&
             /opt/netbox/venv/bin/python /opt/netbox/netbox/manage.py shell < /opt/netbox/scripts/create_superuser.py"

  netbox-worker:  # Serviço do worker que processa tarefas em background.
    <<: *netbox  # Herda configuração base de "netbox"
    depends_on:
      netbox:
        condition: service_healthy  # Só inicia quando o NetBox principal estiver saudável.
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker  # Comando que executa o worker de filas Redis (RQ)
    healthcheck:  # Verifica se o processo rqworker está rodando.
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s

  netbox-housekeeping:  # Serviço que executa tarefas periódicas de manutenção.
    <<: *netbox  # Herda configuração base de "netbox"
    depends_on:
      netbox:
        condition: service_healthy  # Só inicia se NetBox estiver saudável.
    command:
      - /opt/netbox/housekeeping.sh  # Script de manutenção do NetBox.
    healthcheck:  # Verifica se o processo de housekeeping está em execução.
      test: ps -aux | grep -v grep | grep -q housekeeping || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s

  # postgres
  postgres:
    image: docker.io/postgres:17-alpine  # Imagem leve do PostgreSQL versão 17.
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER  # Verifica se o banco está pronto para conexões.
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5
    env_file: env/postgres.env  # Variáveis de ambiente do PostgreSQL (usuário, senha, db, etc.).
    volumes:
      - netbox-postgres-data:/var/lib/postgresql/data  # Persistência dos dados do banco.

  # redis
  redis:
    image: docker.io/valkey/valkey:8.1-alpine  # Usa Valkey (fork do Redis) como fila de tarefas.
    command:
      - sh
      - -c  # Executa comando interpretando variáveis.
      - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD  # Inicia servidor com persistência e senha.
    healthcheck: &redis-healthcheck  # Verifica se o Redis responde com "PONG".
      test: '[ $$(valkey-cli --pass "$${REDIS_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    env_file: env/redis.env  # Carrega senha e config do Redis.
    volumes:
      - netbox-redis-data:/data  # Persistência de dados do Redis.

  redis-cache:
    image: docker.io/valkey/valkey:8.1-alpine  # Segundo Valkey para cache (separado da fila).
    command:
      - sh
      - -c
      - valkey-server --requirepass $$REDIS_PASSWORD  # Redis sem appendonly (cache puro).
    healthcheck: *redis-healthcheck  # Reutiliza a verificação de saúde do Redis principal.
    env_file: env/redis-cache.env  # Configuração separada (pode ter senha própria).
    volumes:
      - netbox-redis-cache-data:/data  # Persistência dos dados do cache.

volumes:  # Define volumes persistentes usados pelos serviços acima.
  netbox-media-files:
    driver: local  # Armazena uploads de mídia dos usuários.
  netbox-postgres-data:
    driver: local  # Dados do PostgreSQL.
  netbox-redis-cache-data:
    driver: local  # Dados do Redis de cache.
  netbox-redis-data:
    driver: local  # Dados do Redis para fila.
  netbox-reports-files:
    driver: local  # Scripts de relatórios personalizados.
  netbox-scripts-files:
    driver: local  # Scripts personalizados executáveis no NetBox.
